@{
  Layout = null;
}

<!DOCTYPE html>

<html>
<head>
  <meta name="viewport" content="width=device-width" />
  <title></title>

  <script src="/content/js/lib/webgl-utils.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
    }
  </style>
</head>
<body>
  <canvas style="position: fixed;" id="canvas"></canvas>

  <script>
    "use strict";

    window.onload = main;

    //setInterval(function () {
    //  console.log('wtf')
    //}, 1000);

    var program;

    function main() {
      var image = new Image();
      image.src = "/content/images/leaves.jpg";
      image.onload = function () {
        var gl = render(image);

        setInterval(function () {
          gl.clearColor(1, 0, 0, 1);
          gl.clear(gl.COLOR_BUFFER_BIT);

          gl.drawArrays(gl.TRIANGLES, 0, 6);
        }, 100);

        setInterval(function () {

          var lightColors = new Float32Array(40);

          lightColors[0] = Math.random();
          lightColors[1] = Math.random();
          lightColors[2] = Math.random();
          lightColors[3] = 1;

          lightColors[4] = Math.random();
          lightColors[5] = Math.random();
          lightColors[6] = Math.random();
          lightColors[7] = 1;

          gl.uniform4fv(gl.getUniformLocation(program, "lightColors"), lightColors);


        }, 1000);

      }
    }

    function render(image) {
      // Get A WebGL context
      var canvas = document.getElementById("canvas");

      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;


      var gl = getWebGLContext(canvas);
      if (!gl) {
        return;
      }

      // setup GLSL program
      program = createProgramFromScripts(gl, ["2d-vertex-shader", "2d-fragment-shader"]);
      gl.useProgram(program);

      var lightPositions = new Float32Array(20);

      lightPositions[0] = 0.5;
      lightPositions[1] = 0.3;

      lightPositions[2] = 0.2;
      lightPositions[3] = 0.7;

      var lightColors = new Float32Array(40);

      lightColors[0] = Math.random();
      lightColors[1] = 0.3;
      lightColors[2] = 0.9;
      lightColors[3] = 1;

      lightColors[4] = 0.9;
      lightColors[5] = 0.9;
      lightColors[6] = 0.2;
      lightColors[7] = 1;

      gl.uniform2fv(gl.getUniformLocation(program, "lightPositions"), lightPositions);
      gl.uniform4fv(gl.getUniformLocation(program, "lightColors"), lightColors);

      // look up where the vertex data needs to go.
      var positionLocation = gl.getAttribLocation(program, "a_position");
      var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

      // provide texture coordinates for the rectangle.
      var texCoordBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
          0.0, 0.0,
          1.0, 0.0,
          0.0, 1.0,
          0.0, 1.0,
          1.0, 0.0,
          1.0, 1.0]), gl.STATIC_DRAW);
      gl.enableVertexAttribArray(texCoordLocation);
      gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

      // lookup uniforms
      var resolutionLocation = gl.getUniformLocation(program, "u_resolution");

      // set the resolution
      gl.uniform2f(resolutionLocation, canvas.width, canvas.height);

      // Create a buffer for the position of the rectangle corners.
      var buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.enableVertexAttribArray(positionLocation);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      // Set a rectangle the same size as the image.
      setRectangle(gl, 0, 0, canvas.width, canvas.height);

      // Draw the rectangle.

      return gl;
    }

    function setRectangle(gl, x, y, width, height) {
      var x1 = x;
      var x2 = x + width;
      var y1 = y;
      var y2 = y + height;
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
         x1, y1,
         x2, y1,
         x1, y2,
         x1, y2,
         x2, y1,
         x2, y2]), gl.STATIC_DRAW);
    }

  </script>
  <!-- vertex shader -->
  <script id="2d-vertex-shader" type="x-shader/x-vertex">
    attribute vec2 a_position;
    attribute vec2 a_texCoord;

    uniform vec2 u_resolution;

    varying vec2 v_texCoord;

    void main() {
    // convert the rectangle from pixels to 0.0 to 1.0
    vec2 zeroToOne = a_position / u_resolution;

    // convert from 0->1 to 0->2
    vec2 zeroToTwo = zeroToOne * 2.0;

    // convert from 0->2 to -1->+1 (clipspace)
    vec2 clipSpace = zeroToTwo - 1.0;

    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);

    // pass the texCoord to the fragment shader
    // The GPU will interpolate this value between points.
    v_texCoord = a_texCoord;
    }
  </script>
  <!-- fragment shader -->
  <script id="2d-fragment-shader" type="x-shader/x-fragment">
    precision mediump float;

    uniform vec2 lightPositions[10];
    uniform vec4 lightColors[10];

    varying vec2 v_texCoord;

    void main() {

      for(int i = 0; i < 10; i++) {
        vec2 light = lightPositions[i];
        vec4 color = lightColors[i];
        
        if(light.x > 0.0) {

          float dist = distance(v_texCoord, light);

          float attenuation = 0.6 +
          0.1 * dist +
          9.0 * dist * dist;

          float factor = 0.5 / attenuation;

          //gl_FragColor += vec4(factor, factor, factor, 1);
          gl_FragColor += color * vec4(factor, factor, factor, 1);

        } else {
          break;  
        }
      } 

    }


  </script>

</body>
</html>
